8 ESLint rules behave differently from their TSLint counterparts:
  * @typescript-eslint/no-unused-vars:
    - Please read the following article as the rule behaviour may change on the short term: https://github.com/typescript-eslint/typescript-eslint/issues/1856
  * @typescript-eslint/no-unused-expressions:
    - The TSLint optional config "allow-new" is the default ESLint behavior and will no longer be ignored.
  * brace-style:
    - ESLint's brace-style will check all tokens.
  * eqeqeq:
    - Option "smart" allows for comparing two literal values, evaluating the value of typeof and null comparisons.
  * camelcase:
    - Leading and trailing underscores (_) in variable names will now be ignored.
  * no-underscore-dangle:
    - Leading or trailing underscores (_) on identifiers will now be forbidden.
  * no-invalid-this:
    - Functions in methods will no longer be ignored.
  * prefer-arrow/prefer-arrow-functions:
    - ESLint does not support allowing standalone function declarations.
    - ESLint does not support allowing named functions defined with the function keyword.

4 rules are not known by tslint-to-eslint-config to have ESLint equivalents:
  * tslint-to-eslint-config does not know the ESLint equivalent for TSLint's "no-constructor-vars".
  * tslint-to-eslint-config does not know the ESLint equivalent for TSLint's "no-trailing-comma".
  * tslint-to-eslint-config does not know the ESLint equivalent for TSLint's "no-unreachable".
  * tslint-to-eslint-config does not know the ESLint equivalent for TSLint's "use-strict".

