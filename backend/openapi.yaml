openapi: 3.0.2
info:
    title: Tutorial site API
    description: The API for the NextJS tutorial site developed by DevIsle. 
    version: 1.0.0
    contact: 
        name: DevIsle Team
        
tags: 
  - name: CMS
    description: All CMS related endpoints

paths:
  /cms/auth/login:
    post:
      tags: 
        - CMS
      summary: Logs into the CMS
      description: Verifies credentials and returns some meta data of the user, alongside a 2 day JWT in the body.
      operationId: cmsUserLogin
      requestBody:
        $ref: "#/components/requestBodies/CMSUserLoginBody"
      responses:
        200:
          description: A confirmed login
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CMSUserLoginRespModel"
        401:
          $ref: "#/components/responses/Unauthorised"
        503:
          $ref: "#/components/responses/ServiceUnavailable"

  /cms/auth/confirm:
    get:
      tags: 
      - CMS
      summary: Verifys the users JWT
      description: Performs a verification check of the users JWT and responds accordingly.
      operationId: verifyCmsUsersJWT
      responses:
        200:
          description: Responds with the **username** of the user and their **userId** if the token is successfully verified.
          content:
            application/json:
              schema:
                $ref: "#/components/requestBodies/CMSUserLoginBody"
              example: 
                {
                  username: "Alex",
                  userId: "5ech7083300gh30f202efaf9"
                }
        401:
          $ref: "#/components/responses/Unauthorised"
      security:
      - BearerAuth: []

  /cms/tutorials/all:
    get:
      tags:
      - CMS
      summary: Get all tutorials
      description: Gets all the tutorials in their **full** format.
      operationId: getAllTutorialsCMS
      responses:
        200:
          description: Responds with a list of **full** tutorials.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CMSAllTutorialsArrayModel"
        500:
          description: Internal server error, will occur under external services failing
          content:
            text/plain:
              schema:
                type: string
                example: "Something went wrong on our side! See here: Example Error"
      security:
      - BearerAuth: []

  /cms/tutorials/create:
    post:
      tags:
      - CMS
      summary: Create tutorial
      description: Creates a tutorial.
      operationId: createATutorialCMS
      requestBody:
        $ref: "#/components/requestBodies/CMSCreateUpdateTutorialBody"
      responses:
        201:
          description: "Tutorial created *successfully*.  \n - `ok` is boolean, in values 0/1.  \n\n - `n` is document affected, in boolean, values 0/1."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MongoUpdateResponse"
        400:
          description: Bad request, will occur if the request body is incorrect
          content:
            text/plain:
              schema:
                type: string
                example: "Server cannot process this request!"
        500:
          description: Internal server error, will occur under external services failing
          content:
            text/plain:
              schema:
                type: string
                example: "Something went wrong on our side! See here: Example Error"
      security:
      - BearerAuth: []
  
  /cms/tutorials/update:
    put:
      tags:
      - CMS
      summary: Update a tutorial
      description: Updates a tutorial by it's `ObjectId(id)`
      operationId: updateATutorialCMS
      parameters:
        - in: query
          description: The `ObjectId(id)` of the tutorial we wish to update.
          name: tutId
          required: true
          schema:
            type: string
          example: /cms/tutorials/update?tutId=5ec6aa4993014b10402122b2
      requestBody:
        $ref: "#/components/requestBodies/CMSCreateUpdateTutorialBody"
      responses:
        200:
          description: "Tutorial updated *successfully*.  \n - `ok` is boolean, in values 0/1.  \n\n - `n` is document affected, in boolean, values 0/1.  \n - `nModified` is the amount of documents updated/changed."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExtendedMongoUpdateResponse"
        400:
          description: "Bad request, will occur if:  \n - the request body is incorrect  \n\n - the `ObjectId(id)` string byte size is incorrect"
          content:
            text/plain:
              schema:
                type: string
                example: "Server cannot process this request!"
      security:
      - BearerAuth: []

  # PUBLIC RESOURCES
  #
  # Get tutorials
  #
  #    Get tut by id
  #       /public/tutorials/{ID}
  #
  /public/tutorials/{tutId}:
    get:
      tags:
      - PUBLIC
      summary: Get a tutorial by it's ID
      description: Gets a tutorial by it's `ObjectId(id)` (represented as a string)
      operationId: getTutById
      parameters:
        - in: path
          description: The `ObjectId(id)` of the tutorial we wish retreive
          name: tutId
          required: true
          schema:
            type: string
          example: /public/tutorials/5ec6aa4993014b10402122b2
      responses:
        200:
          description: "Returns a `PublicTutorial` formatted object."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PublicTutorialModel"
        204:
          description: "Returns 204 if tutorial does not exist"
        400:
          description: "Bad request, will occur when the `ObjectId(id)` path param string byte size is incorrect"
          content:
            text/plain:
              schema:
                type: string
                example: "ObjectID argument passed in [the query] must be a single String of 12 bytes or a string of 24 hex"
  
  /public/tutorials/cards/{category}:
    get:
      tags:
      - PUBLIC
      summary: Get a an array of tutorial cards
      description: "Gets all the tutorial cards of a given category, alternatively,
                    if passed query params offset/outset, this will grab a specific portion of the card list"
      operationId: getTutCardsByCategory
      parameters:
        - in: path
          description: The tutorial category we wish to use for our card filter
          name: category
          required: true
          schema:
            type: string
          example: /public/tutorials/cards/javascript
        - in: query
          description: The offset to begin at when filtering the card list
          name: offset
          required: false
          schema:
            type: number
          example: /public/tutorials/cards/javascript?offset=0&outset=50
        - in: query
          description: The outset to begin at when filtering the card list
          name: outset
          required: false
          schema:
            type: number
          example: /public/tutorials/cards/javascript?offset=0&outset=50
      responses:
        200:
          description: "Returns an array of `TutorialCard`s"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/PublicTutorialCardModel"
        400:
          description: "Bad request will occur when the query params are the wrong type"
          content:
            text/plain:
              schema:
                type: string
                example: "Query params for the category request must be integers."
        404:
          description: "404 Occurs when the passed path param category doesn't exist"
          content:
            text/plain:
              schema:
                type: string
                example: "The given category does not exist."

  #
  #    Get all tutorials cards for this category
  #       /public/tutorials/cards/{category}?offset=*&outset=*
  #
  # Categories
  #     Get cat by id
  #       /public/tutorials/categories?catId=*
  #
  #     Get cats in offset/outset -> this endpoint will also be used by the CMS lol
  #       /public/tutorials/categories?offset=*&outset=*
  #
  # Svg assets to be stored in NextJS server, not here.
  # Asset should be named after category name, i.e., Learn JS = learn-js.png/svg/jpeg w/e
  #

components:
  schemas:
    PublicTutorialCardModel:
      type: object
      properties:
        _id:
          type: string
        cardTutName:
          type: string
        category:
          type: string
        cardText:
          type: string
        authorName:
          type: string
        isAvailable:
          type: boolean
    PublicTutorialModel:
      type: object
      properties:
        name:
          type: string
        category:
          type: string
        authorName:
          type: string
        isAvailable:
          type: boolean
        content:
          type: array
          items:
            type: object
            properties:
              sectionTitle:
                type: string
              sectionBody:
                type: string
    MongoUpdateResponse:
      type: object
      properties:
        ok:
          type: integer
        n:
          type: integer
      required:
        - ok
        - "n"
    ExtendedMongoUpdateResponse:
      allOf:
        - $ref: "#/components/schemas/MongoUpdateResponse"
        - type: object
          properties:
            nModified: 
              type: integer
          required:
            - nModified
    CMSUserLoginModel:
      type: object
      properties:
        username:
          type: string
        password:
          type: string
      required: 
        - username
        - password
    CMSUserLoginRespModel:
      allOf:
        - type: object
          properties:
            successfulLogin:
              type: boolean
            jwt:
              type: string
          required:
            - successfulLogin
            - jwt
        - $ref: "#/components/schemas/CMSUserLoginModel"
    CMSTutorialModel:
      type: object
      properties:
        _id:
          type: string
        name:
          type: string
        html:
          type: string
        markdown:
          type: string
        category:
          type: string
        authorId:
          type: string
        authorName:
          type: string
        isAvailable:
          type: boolean
      required:
        - _id
        - name
        - html
        - markdown
        - category
        - authorId
        - authorName
        - isAvailable
    CMSAllTutorialsArrayModel:
      type: array
      items: 
        $ref: "#/components/schemas/CMSTutorialModel"
    TutorialCreateUpdateModel:
      type: object
      properties:
        name:
          type: string
        html:
          type: string
        markdown:
          type: string
        # TODO: Limit the categories to reference a category collection
        category:
          type: string
      required:
        - name
        - html
        - markdown
        - category

  responses:
    ServiceUnavailable:
      description: Service unavailable
      content:
        text/plain:
          schema:
            type: string
            example: Error object schema todo
    Unauthorised:
      description: Unauthorised
      content:
        text/plain:
          schema:
            type: string
            example: Access denied! Unauthorised.

  requestBodies:
    CMSCreateUpdateTutorialBody:
      description: The schema to create/update a tutorial, a.k.a *PartialTutorial* in app.
      required: true
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/TutorialCreateUpdateModel"
    CMSUserLoginBody:
      description: The login credential schema
      required: true
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/CMSUserLoginModel"
            
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
    
servers:
    - url: http://127.0.0.1:3000/
      description: Development

